<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Parser Application</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    #app {
      max-width: 1000px;
      margin: 0 auto;
    }
    .nav {
      display: flex;
      background-color: #f5f5f5;
      padding: 10px;
      margin-bottom: 20px;
      border-radius: 5px;
    }
    .nav a {
      margin-right: 15px;
      color: #42b983;
      text-decoration: none;
      font-weight: bold;
    }
    .nav a.active {
      color: #2c3e50;
    }
    .container {
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    h1 {
      color: #2c3e50;
      margin-top: 0;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input[type="text"],
    input[type="file"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-sizing: border-box;
    }
    .btn {
      background-color: #42b983;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }
    .btn:hover {
      background-color: #3aa876;
    }
    .btn:disabled {
      background-color: #a0cfbb;
      cursor: not-allowed;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      padding: 10px;
      border-bottom: 1px solid #ddd;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .alert {
      padding: 12px;
      border-radius: 4px;
      margin: 15px 0;
    }
    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .alert-danger {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    .empty-message {
      padding: 20px;
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 4px;
      text-align: center;
      margin-top: 20px;
    }
    .feature-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    .feature-card {
      flex: 1;
      min-width: 250px;
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .feature-card h2 {
      color: #42b983;
      margin-top: 0;
    }
    .result {
      margin-top: 20px;
      padding: 15px;
      border-radius: 4px;
    }
    .exists {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .not-exists {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
  </style>
</head>
<body>
  <div id="app">
    <div class="nav">
      <a href="#" @click.prevent="showPage('home')" :class="{ active: currentPage === 'home' }">Home</a>
      <a href="#" @click.prevent="showPage('upload')" :class="{ active: currentPage === 'upload' }">Upload Students</a>
      <a href="#" @click.prevent="showPage('list')" :class="{ active: currentPage === 'list' }">View Students</a>
      <a href="#" @click.prevent="showPage('check')" :class="{ active: currentPage === 'check' }">Check Student</a>
    </div>

    <!-- Home Page -->
    <div v-if="currentPage === 'home'" class="container">
      <h1>Student Data Parser System</h1>
      <div class="feature-cards">
        <div class="feature-card">
          <h2>Upload Student Data</h2>
          <p>Upload Excel files containing student information to parse and store in the system.</p>
          <button class="btn" @click="showPage('upload')">Go to Upload</button>
        </div>
        <div class="feature-card">
          <h2>View Student List</h2>
          <p>View all students currently stored in the system database.</p>
          <button class="btn" @click="showPage('list')">View Students</button>
        </div>
        <div class="feature-card">
          <h2>Check Student Existence</h2>
          <p>Check if a specific student exists in the system using their student number.</p>
          <button class="btn" @click="showPage('check')">Check Student</button>
        </div>
      </div>
    </div>

    <!-- Upload Page -->
    <div v-if="currentPage === 'upload'" class="container">
      <h1>Upload Student Data</h1>
      <div v-if="uploadMessage" :class="['alert', uploadSuccess ? 'alert-success' : 'alert-danger']">
        {{ uploadMessage }}
      </div>
      <div class="form-group">
        <label for="fileInput">Select Excel File:</label>
        <input type="file" id="fileInput" ref="fileInput" accept=".xlsx,.xls" @change="handleFileChange" />
      </div>
      <button class="btn" @click="uploadFile" :disabled="!selectedFile || isUploading">
        {{ isUploading ? 'Uploading...' : 'Upload and Parse' }}
      </button>
      <div v-if="uploadedStudents.length > 0">
        <h2>Parsed Students:</h2>
        <table>
          <thead>
            <tr>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Student Number</th>
              <th>Birth Date</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(student, index) in uploadedStudents" :key="index">
              <td>{{ student.firstName }}</td>
              <td>{{ student.lastName }}</td>
              <td>{{ student.studentNumber }}</td>
              <td>{{ student.birthDate }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- List Page -->
    <div v-if="currentPage === 'list'" class="container">
      <h1>Student List</h1>
      <div v-if="listError" class="alert alert-danger">
        {{ listError }}
      </div>
      <button class="btn" @click="fetchStudents" :disabled="isLoading">
        {{ isLoading ? 'Loading...' : 'Refresh List' }}
      </button>
      <div v-if="isLoading" style="margin-top: 20px;">Loading students...</div>
      <div v-else>
        <div v-if="students.length === 0" class="empty-message">
          <p>No students found. Upload some student data first.</p>
        </div>
        <table v-else>
          <thead>
            <tr>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Student Number</th>
              <th>Birth Date</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(student, index) in students" :key="index">
              <td>{{ student.firstName }}</td>
              <td>{{ student.lastName }}</td>
              <td>{{ student.studentNumber }}</td>
              <td>{{ student.birthDate }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Check Page -->
    <div v-if="currentPage === 'check'" class="container">
      <h1>Check Student Existence</h1>
      <div class="form-group">
        <label for="studentNumber">Student Number:</label>
        <input 
          type="text" 
          id="studentNumber" 
          v-model="studentNumber" 
          placeholder="Enter student number to check"
          @keyup.enter="checkStudent"
        />
      </div>
      <button class="btn" @click="checkStudent" :disabled="isChecking || !studentNumber">
        {{ isChecking ? 'Checking...' : 'Check Student' }}
      </button>
      <div v-if="checkResult !== null" class="result" :class="{'exists': checkResult, 'not-exists': !checkResult}">
        <p v-if="checkResult">
          <strong>Student Found!</strong> A student with the number "{{ studentNumber }}" exists in the database.
        </p>
        <p v-else>
          <strong>Student Not Found.</strong> No student with the number "{{ studentNumber }}" was found in the database.
        </p>
      </div>
      <div v-if="checkError" class="alert alert-danger">
        {{ checkError }}
      </div>
    </div>
    
  </div>

  <!-- Import Vue.js from CDN -->
  <script src="https://unpkg.com/vue@3.3.4/dist/vue.global.js"></script>
  <!-- Import Axios from CDN -->
  <script src="https://unpkg.com/axios@1.6.2/dist/axios.min.js"></script>
  
  <script>
    // Create Vue application
    const { createApp, ref, onMounted } = Vue;
    
    createApp({
      setup() {
        // Shared state
        const currentPage = ref('home');
        const apiBaseUrl = 'http://localhost:8080/parser_api/api/students';
        
        // Upload page state
        const selectedFile = ref(null);
        const isUploading = ref(false);
        const uploadSuccess = ref(false);
        const uploadMessage = ref('');
        const uploadedStudents = ref([]);
        
        // List page state
        const students = ref([]);
        const isLoading = ref(false);
        const listError = ref(null);
        
        // Check page state
        const studentNumber = ref('');
        const isChecking = ref(false);
        const checkResult = ref(null);
        const checkError = ref(null);
        
        // Navigation function
        function showPage(page) {
          currentPage.value = page;
          
          // Reset page-specific states when navigating
          uploadMessage.value = '';
          uploadedStudents.value = [];
          checkResult.value = null;
          checkError.value = null;
          
          // If navigating to list page, fetch students
          if (page === 'list') {
            fetchStudents();
          }
        }
        
        // File upload handler
        function handleFileChange(event) {
          selectedFile.value = event.target.files[0];
        }
        
        // Upload file function
        async function uploadFile() {
          if (!selectedFile.value) {
            uploadMessage.value = 'Please select a file';
            uploadSuccess.value = false;
            return;
          }
          
          isUploading.value = true;
          uploadMessage.value = '';
          
          const formData = new FormData();
          formData.append('file', selectedFile.value);
          
          try {
            const response = await axios.post(apiBaseUrl + '/', formData, {
              headers: {
                'Content-Type': 'multipart/form-data'
              }
            });
            
            uploadSuccess.value = response.data.success;
            uploadMessage.value = response.data.message;
            
            if (response.data.students) {
              uploadedStudents.value = response.data.students;
            }
          } catch (error) {
            uploadSuccess.value = false;
            uploadMessage.value = error.response?.data?.message || 'Error uploading file';
            console.error('Upload error:', error);
          } finally {
            isUploading.value = false;
          }
        }
        
        // Fetch students function
        async function fetchStudents() {
          isLoading.value = true;
          listError.value = null;
          
          try {
            const response = await axios.get(apiBaseUrl + '/');
            students.value = response.data;
          } catch (error) {
            listError.value = 'Error fetching students: ' + (error.response?.data?.message || error.message);
            console.error('Fetch error:', error);
          } finally {
            isLoading.value = false;
          }
        }
        
        // Check student function
        async function checkStudent() {
          if (!studentNumber.value) {
            return;
          }
          
          isChecking.value = true;
          checkError.value = null;
          checkResult.value = null;
          
          try {
            const response = await axios.get(`${apiBaseUrl}/check/${studentNumber.value}`);
            checkResult.value = response.data.exists;
          } catch (error) {
            checkError.value = 'Error checking student: ' + (error.response?.data?.message || error.message);
            console.error('Check error:', error);
          } finally {
            isChecking.value = false;
          }
        }
        
        // Load initial data when component is mounted
        onMounted(() => {
          // Fetch students if on list page
          if (currentPage.value === 'list') {
            fetchStudents();
          }
        });
        
        // Return all reactive references and functions
        return {
          currentPage,
          
          // Upload
          selectedFile,
          isUploading,
          uploadSuccess,
          uploadMessage,
          uploadedStudents,
          handleFileChange,
          uploadFile,
          
          // List
          students,
          isLoading,
          listError,
          fetchStudents,
          
          // Check
          studentNumber,
          isChecking,
          checkResult,
          checkError,
          checkStudent,
          
          // Navigation
          showPage
        };
      }
    }).mount('#app');
  </script>
</body>
</html>